/**
 * Base Event Interfaces and Common Types
 * 
 * All events in the 8Medical platform inherit from these base interfaces,
 * ensuring consistency and type safety across all services.
 */

/**
 * Standard metadata included with every event
 */
export interface EventMetadata {
  /**
   * Unique identifier for tracking related events across services
   * Same correlationId should be used for events that are part of the same business process
   */
  correlationId: string;

  /**
   * The service that published this event
   */
  sourceService: string;

  /**
   * Event schema version for backwards compatibility
   */
  version: string;

  /**
   * Event priority for processing order
   */
  priority?: 'low' | 'normal' | 'high' | 'urgent';

  /**
   * Additional context-specific headers
   */
  headers?: Record<string, string>;

  /**
   * Whether this event requires guaranteed delivery
   */
  requiresAcknowledgment?: boolean;

  /**
   * Maximum number of retry attempts for this event
   */
  maxRetries?: number;

  /**
   * Event expiration time (ISO 8601 string)
   * Events older than this should be discarded
   */
  expiresAt?: string;
}

/**
 * Base interface that all events must implement
 * 
 * @template TData - The shape of the event's data payload
 */
export interface BaseEvent<TData = any> {
  /**
   * Unique identifier for this specific event instance
   */
  eventId: string;

  /**
   * The type of event - should use the constants from event-specific files
   * Format: {domain}.{entity}.{action}
   * Examples: 'user.business.registered', 'hrm.hospital.verified'
   */
  eventType: string;

  /**
   * When the event occurred (ISO 8601 string)
   */
  timestamp: string;

  /**
   * The event payload - strongly typed based on event type
   */
  data: TData;

  /**
   * Event metadata for tracking and processing
   */
  metadata: EventMetadata;
}

/**
 * Event envelope for Redis Stream storage
 * This is what actually gets serialized and stored in Redis
 */
export interface EventEnvelope<TData = any> extends BaseEvent<TData> {
  /**
   * The Redis stream this event was published to
   */
  stream: string;

  /**
   * Redis stream message ID (auto-generated by Redis)
   */
  streamMessageId?: string;
}

/**
 * Common business entity identifiers used across events
 */
export interface BusinessEntityIds {
  /**
   * User identifier
   */
  userId?: string;

  /**
   * Business entity identifier
   */
  businessId?: string;

  /**
   * Hospital profile identifier (HRM Service)
   */
  hospitalId?: string;

  /**
   * Customer/patient identifier
   */
  customerId?: string;

  /**
   * Payment transaction identifier
   */
  transactionId?: string;

  /**
   * Transport/ambulance identifier
   */
  transportId?: string;

  /**
   * File/document identifier
   */
  fileId?: string;

  /**
   * Admin user identifier
   */
  adminId?: string;
}

/**
 * Standard error information for failed operations
 */
export interface EventErrorInfo {
  /**
   * Error code for programmatic handling
   */
  code: string;

  /**
   * Human-readable error message
   */
  message: string;

  /**
   * Additional error details
   */
  details?: Record<string, any>;

  /**
   * Stack trace (for debugging, not for production)
   */
  stack?: string;

  /**
   * Timestamp when the error occurred
   */
  occurredAt: string;
}

/**
 * Common address structure used across multiple events
 */
export interface Address {
  street: string;
  city: string;
  state: string;
  postalCode: string;
  country: string;
  coordinates?: {
    latitude: number;
    longitude: number;
  };
}

/**
 * Contact information structure
 */
export interface ContactInfo {
  email?: string;
  phoneNumber?: string;
  alternatePhone?: string;
  emergencyContact?: {
    name: string;
    phoneNumber: string;
    relationship: string;
  };
}

/**
 * Business types supported by the platform
 */
export type BusinessType = 
  | 'hospital' 
  | 'hmo' 
  | 'diagnostic_center' 
  | 'ambulance_provider'
  | 'pharmacy'
  | 'laboratory';

/**
 * User types in the system
 */
export type UserType = 
  | 'customer' 
  | 'business_owner' 
  | 'business_agent' 
  | 'admin' 
  | 'super_admin';

/**
 * Common status values across different entities
 */
export type EntityStatus = 
  | 'active' 
  | 'inactive' 
  | 'pending' 
  | 'suspended' 
  | 'archived' 
  | 'deleted';

/**
 * Verification status for documents and entities
 */
export type VerificationStatus = 
  | 'pending' 
  | 'in_review' 
  | 'verified' 
  | 'rejected' 
  | 'expired' 
  | 'requires_resubmission';

/**
 * Utility type for extracting event data type from an event
 */
export type EventData<T extends BaseEvent> = T['data'];

/**
 * Utility type for creating a typed event handler
 */
export type EventHandler<T extends BaseEvent> = (event: T) => Promise<void> | void;

/**
 * Event batch for bulk operations
 */
export interface EventBatch<TData = any> {
  events: BaseEvent<TData>[];
  batchId: string;
  batchMetadata?: EventMetadata;
}